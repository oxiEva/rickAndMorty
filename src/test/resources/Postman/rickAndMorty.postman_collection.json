{
	"info": {
		"_postman_id": "a07ff81e-242d-460c-9985-34bb95d6507f",
		"name": "Ricky and Morty",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17505965"
	},
	"item": [
		{
			"name": "Character",
			"item": [
				{
					"name": "Filter characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Content type is application/json', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})",
									"",
									"pm.test('Info object properties validation', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.info).to.be.an('object');",
									"    pm.expect(responseData.info).to.have.property('count');",
									"    pm.expect(responseData.info).to.have.property('pages');",
									"    pm.expect(responseData.info).to.have.property('next');",
									"    pm.expect(responseData.info).to.have.property('prev');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://rickandmortyapi.com/api/character/?name=ric",
							"protocol": "https",
							"host": [
								"rickandmortyapi",
								"com"
							],
							"path": [
								"api",
								"character",
								""
							],
							"query": [
								{
									"key": "name",
									"value": "ric"
								},
								{
									"key": "status",
									"value": "alive",
									"disabled": true
								},
								{
									"key": "species",
									"value": "",
									"disabled": true
								},
								{
									"key": "type",
									"value": "",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single character",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('status');",
									"    pm.expect(responseData).to.have.property('species');",
									"    pm.expect(responseData).to.have.property('type');",
									"    pm.expect(responseData).to.have.property('gender');",
									"    pm.expect(responseData).to.have.property('origin');",
									"    pm.expect(responseData).to.have.property('location');",
									"    pm.expect(responseData).to.have.property('image');",
									"    pm.expect(responseData).to.have.property('episode');",
									"    pm.expect(responseData).to.have.property('url');",
									"    pm.expect(responseData).to.have.property('created');",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Origin and location have name and url properties\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.origin).to.have.property('name');",
									"    pm.expect(responseData.origin).to.have.property('url');",
									"    pm.expect(responseData.location).to.have.property('name');",
									"    pm.expect(responseData.location).to.have.property('url');",
									"});",
									"",
									"",
									"pm.test(\"Episode is an array with at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.episode).to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://rickandmortyapi.com/api/character/2",
							"protocol": "https",
							"host": [
								"rickandmortyapi",
								"com"
							],
							"path": [
								"api",
								"character",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Episode",
			"item": [
				{
					"name": "Get a single episode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									"",
									"pm.test('Content-Type header is application/json', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})",
									"",
									"pm.test('Response has the required fields', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('air_date');",
									"    pm.expect(responseData).to.have.property('episode');",
									"    pm.expect(responseData).to.have.property('characters');",
									"    pm.expect(responseData).to.have.property('url');",
									"    pm.expect(responseData).to.have.property('created');",
									"})",
									"",
									"pm.test('Characters array should not be empty', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.characters).to.be.an('array').and.to.have.lengthOf.at.least(1, 'Characters array should not be empty');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://rickandmortyapi.com/api/episode/17",
							"protocol": "https",
							"host": [
								"rickandmortyapi",
								"com"
							],
							"path": [
								"api",
								"episode",
								"17"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all episodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									"",
									"pm.test('Content-Type header is application/json', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})",
									"",
									"pm.test('Info object should have count, pages, next, and prev fields', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.info).to.be.an('object');",
									"    pm.expect(responseData.info).to.have.property('count');",
									"    pm.expect(responseData.info).to.have.property('pages');",
									"    pm.expect(responseData.info).to.have.property('next');",
									"    pm.expect(responseData.info).to.have.property('prev');",
									"})",
									"",
									"pm.test('Id is a non-negative integer', function () {",
									"    const responseData = pm.response.json();",
									"    responseData.results.forEach(function (episode) {",
									"        pm.expect(episode.id).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"})",
									"",
									"pm.test('Name and episode are non-empty strings', function () {",
									"    const responseData = pm.response.json();",
									"    responseData.results.forEach(function (episode) {",
									"        pm.expect(episode.name).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
									"        pm.expect(episode.episode).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
									"    });",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://rickandmortyapi.com/api/episode/",
							"protocol": "https",
							"host": [
								"rickandmortyapi",
								"com"
							],
							"path": [
								"api",
								"episode",
								""
							]
						}
					},
					"response": []
				}
			]
		}
	]
}